'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _propTypes = require('prop-types');

var PropTypes = _interopRequireWildcard(_propTypes);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function propsValueType(props, propName, componentName) {
    var basicType = PropTypes.oneOfType([PropTypes.string, PropTypes.number]);
    var labelInValueShape = PropTypes.shape({
        key: basicType,
        label: PropTypes.node
    });
    if (props.labelInValue) {
        var validate = PropTypes.oneOfType([PropTypes.arrayOf(labelInValueShape), labelInValueShape]);
        PropTypes.checkPropTypes(validate, props, propName, componentName);
        // if value is no null, it's a object
        if (props[propName] && typeof props[propName] !== 'object') {
            throw new Error('Invalid prop `' + propName + '` supplied to `' + componentName + '`, ' + ('when you set `labelInValue` to `true`, `' + propName + '` should in ') + 'shape of `{ key: string | number, label?: ReactNode }`.');
        }
    } else if ((props.mode === 'multiple' || props.mode === 'tags' || props.multiple || props.tags) && props[propName] === '') {
        return new Error('Invalid prop `' + propName + '` of type `string` supplied to `' + componentName + '`, ' + 'expected `array` when `multiple` or `tags` is `true`.');
    } else {
        var _validate = PropTypes.oneOfType([PropTypes.arrayOf(basicType), basicType]);
        PropTypes.checkPropTypes(_validate, props, propName, componentName);
    }
    return null;
}
var SelectPropTypes = {
    id: PropTypes.string,
    defaultActiveFirstOption: PropTypes.bool,
    multiple: PropTypes.bool,
    filterOption: PropTypes.any,
    children: PropTypes.any,
    showSearch: PropTypes.bool,
    disabled: PropTypes.bool,
    allowClear: PropTypes.bool,
    showArrow: PropTypes.bool,
    tags: PropTypes.bool,
    prefixCls: PropTypes.string,
    className: PropTypes.string,
    transitionName: PropTypes.string,
    optionLabelProp: PropTypes.string,
    optionFilterProp: PropTypes.string,
    animation: PropTypes.string,
    choiceTransitionName: PropTypes.string,
    open: PropTypes.bool,
    defaultOpen: PropTypes.bool,
    onChange: PropTypes.func,
    onBlur: PropTypes.func,
    onFocus: PropTypes.func,
    onSelect: PropTypes.func,
    onSearch: PropTypes.func,
    onPopupScroll: PropTypes.func,
    onMouseEnter: PropTypes.func,
    onMouseLeave: PropTypes.func,
    onInputKeyDown: PropTypes.func,
    placeholder: PropTypes.any,
    onDeselect: PropTypes.func,
    labelInValue: PropTypes.bool,
    loading: PropTypes.bool,
    value: propsValueType,
    defaultValue: propsValueType,
    dropdownStyle: PropTypes.object,
    maxTagTextLength: PropTypes.number,
    maxTagCount: PropTypes.number,
    maxTagPlaceholder: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),
    tokenSeparators: PropTypes.arrayOf(PropTypes.string),
    getInputElement: PropTypes.func,
    showAction: PropTypes.arrayOf(PropTypes.string),
    clearIcon: PropTypes.node,
    inputIcon: PropTypes.node,
    removeIcon: PropTypes.node,
    menuItemSelectedIcon: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),
    dropdownRender: PropTypes.func
};
exports['default'] = SelectPropTypes;
module.exports = exports['default'];