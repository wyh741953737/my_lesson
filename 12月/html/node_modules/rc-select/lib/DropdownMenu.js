'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _domScrollIntoView = require('dom-scroll-into-view');

var _domScrollIntoView2 = _interopRequireDefault(_domScrollIntoView);

var _propTypes = require('prop-types');

var PropTypes = _interopRequireWildcard(_propTypes);

var _raf = require('raf');

var _raf2 = _interopRequireDefault(_raf);

var _rcMenu = require('rc-menu');

var _rcMenu2 = _interopRequireDefault(_rcMenu);

var _toArray = require('rc-util/lib/Children/toArray');

var _toArray2 = _interopRequireDefault(_toArray);

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _reactDom = require('react-dom');

var _util = require('./util');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var DropdownMenu = function (_React$Component) {
    (0, _inherits3['default'])(DropdownMenu, _React$Component);

    function DropdownMenu(props) {
        (0, _classCallCheck3['default'])(this, DropdownMenu);

        var _this = (0, _possibleConstructorReturn3['default'])(this, (DropdownMenu.__proto__ || Object.getPrototypeOf(DropdownMenu)).call(this, props));

        _this.rafInstance = { cancel: function cancel() {
                return null;
            } };
        _this.lastVisible = false;
        _this.scrollActiveItemToView = function () {
            // scroll into view
            var itemComponent = (0, _reactDom.findDOMNode)(_this.firstActiveItem);
            var _this$props = _this.props,
                visible = _this$props.visible,
                firstActiveValue = _this$props.firstActiveValue;

            var value = _this.props.value;
            if (!itemComponent || !visible) {
                return;
            }
            var scrollIntoViewOpts = {
                onlyScrollIfNeeded: true
            };
            if ((!value || value.length === 0) && firstActiveValue) {
                scrollIntoViewOpts.alignWithTop = true;
            }
            // Delay to scroll since current frame item position is not ready when pre view is by filter
            // https://github.com/ant-design/ant-design/issues/11268#issuecomment-406634462
            _this.rafInstance = (0, _raf2['default'])(function () {
                (0, _domScrollIntoView2['default'])(itemComponent, (0, _reactDom.findDOMNode)(_this.menuRef), scrollIntoViewOpts);
            });
        };
        _this.renderMenu = function () {
            var _this$props2 = _this.props,
                menuItems = _this$props2.menuItems,
                menuItemSelectedIcon = _this$props2.menuItemSelectedIcon,
                defaultActiveFirstOption = _this$props2.defaultActiveFirstOption,
                prefixCls = _this$props2.prefixCls,
                multiple = _this$props2.multiple,
                onMenuSelect = _this$props2.onMenuSelect,
                inputValue = _this$props2.inputValue,
                backfillValue = _this$props2.backfillValue,
                onMenuDeselect = _this$props2.onMenuDeselect,
                visible = _this$props2.visible;

            var firstActiveValue = _this.props.firstActiveValue;
            if (menuItems && menuItems.length) {
                var menuProps = {};
                if (multiple) {
                    menuProps.onDeselect = onMenuDeselect;
                    menuProps.onSelect = onMenuSelect;
                } else {
                    menuProps.onClick = onMenuSelect;
                }
                var value = _this.props.value;
                var selectedKeys = (0, _util.getSelectKeys)(menuItems, value);
                var activeKeyProps = {};
                var clonedMenuItems = menuItems;
                if (selectedKeys.length || firstActiveValue) {
                    if (visible && !_this.lastVisible) {
                        activeKeyProps.activeKey = selectedKeys[0] || firstActiveValue;
                    } else if (!visible) {
                        activeKeyProps.activeKey = undefined;
                    }
                    var foundFirst = false;
                    // set firstActiveItem via cloning menus
                    // for scroll into view
                    var clone = function clone(item) {
                        var key = item.key;
                        if (!foundFirst && selectedKeys.indexOf(key) !== -1 || !foundFirst && !selectedKeys.length && firstActiveValue.indexOf(item.key) !== -1) {
                            foundFirst = true;
                            return React.cloneElement(item, {
                                ref: function ref(_ref) {
                                    _this.firstActiveItem = _ref;
                                }
                            });
                        }
                        return item;
                    };
                    clonedMenuItems = menuItems.map(function (item) {
                        if (item.type.isMenuItemGroup) {
                            var children = (0, _toArray2['default'])(item.props.children).map(clone);
                            return React.cloneElement(item, {}, children);
                        }
                        return clone(item);
                    });
                } else {
                    // Clear firstActiveItem when dropdown menu items was empty
                    // Avoid `Unable to find node on an unmounted component`
                    // https://github.com/ant-design/ant-design/issues/10774
                    _this.firstActiveItem = null;
                }
                // clear activeKey when inputValue change
                var lastValue = value && value[value.length - 1];
                if (inputValue !== _this.lastInputValue && (!lastValue || lastValue !== backfillValue)) {
                    activeKeyProps.activeKey = '';
                }
                return React.createElement(_rcMenu2['default'], (0, _extends3['default'])({ ref: _this.saveMenuRef, style: _this.props.dropdownMenuStyle, defaultActiveFirst: defaultActiveFirstOption, role: "listbox", itemIcon: multiple ? menuItemSelectedIcon : null }, activeKeyProps, { multiple: multiple }, menuProps, { selectedKeys: selectedKeys, prefixCls: prefixCls + '-menu' }), clonedMenuItems);
            }
            return null;
        };
        _this.lastInputValue = props.inputValue;
        _this.saveMenuRef = (0, _util.saveRef)(_this, 'menuRef');
        return _this;
    }

    (0, _createClass3['default'])(DropdownMenu, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.scrollActiveItemToView();
            this.lastVisible = this.props.visible;
        }
    }, {
        key: 'shouldComponentUpdate',
        value: function shouldComponentUpdate(nextProps) {
            if (!nextProps.visible) {
                this.lastVisible = false;
            }
            // freeze when hide
            return this.props.visible && !nextProps.visible || nextProps.visible || nextProps.inputValue !== this.props.inputValue;
        }
    }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate(prevProps) {
            var props = this.props;
            if (!prevProps.visible && props.visible) {
                this.scrollActiveItemToView();
            }
            this.lastVisible = props.visible;
            this.lastInputValue = props.inputValue;
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            if (this.rafInstance && this.rafInstance.cancel) {
                this.rafInstance.cancel();
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var renderMenu = this.renderMenu();
            return renderMenu ? React.createElement("div", { style: {
                    overflow: 'auto',
                    transform: 'translateZ(0)'
                }, id: this.props.ariaId, onFocus: this.props.onPopupFocus, onMouseDown: _util.preventDefaultEvent, onScroll: this.props.onPopupScroll }, renderMenu) : null;
        }
    }]);
    return DropdownMenu;
}(React.Component);

exports['default'] = DropdownMenu;

DropdownMenu.displayName = 'DropdownMenu';
DropdownMenu.propTypes = {
    ariaId: PropTypes.string,
    defaultActiveFirstOption: PropTypes.bool,
    value: PropTypes.any,
    dropdownMenuStyle: PropTypes.object,
    multiple: PropTypes.bool,
    onPopupFocus: PropTypes.func,
    onPopupScroll: PropTypes.func,
    onMenuDeSelect: PropTypes.func,
    onMenuSelect: PropTypes.func,
    prefixCls: PropTypes.string,
    menuItems: PropTypes.any,
    inputValue: PropTypes.string,
    visible: PropTypes.bool,
    firstActiveValue: PropTypes.string,
    menuItemSelectedIcon: PropTypes.oneOfType([PropTypes.func, PropTypes.node])
};
module.exports = exports['default'];