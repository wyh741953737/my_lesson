'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _propTypes = require('prop-types');

var PropTypes = _interopRequireWildcard(_propTypes);

var _rcTrigger = require('rc-trigger');

var _rcTrigger2 = _interopRequireDefault(_rcTrigger);

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _reactDom = require('react-dom');

var ReactDOM = _interopRequireWildcard(_reactDom);

var _DropdownMenu = require('./DropdownMenu');

var _DropdownMenu2 = _interopRequireDefault(_DropdownMenu);

var _util = require('./util');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var __rest = undefined && undefined.__rest || function (s, e) {
    var t = {};
    for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];
    }return t;
};

_rcTrigger2['default'].displayName = 'Trigger';
var BUILT_IN_PLACEMENTS = {
    bottomLeft: {
        points: ['tl', 'bl'],
        offset: [0, 4],
        overflow: {
            adjustX: 0,
            adjustY: 1
        }
    },
    topLeft: {
        points: ['bl', 'tl'],
        offset: [0, -4],
        overflow: {
            adjustX: 0,
            adjustY: 1
        }
    }
};

var SelectTrigger = function (_React$Component) {
    (0, _inherits3['default'])(SelectTrigger, _React$Component);

    function SelectTrigger(props) {
        (0, _classCallCheck3['default'])(this, SelectTrigger);

        var _this = (0, _possibleConstructorReturn3['default'])(this, (SelectTrigger.__proto__ || Object.getPrototypeOf(SelectTrigger)).call(this, props));

        _this.dropdownMenuRef = null;
        _this.setDropdownWidth = function () {
            var dom = ReactDOM.findDOMNode(_this);
            var width = dom.offsetWidth;
            if (width !== _this.state.dropdownWidth) {
                _this.setState({ dropdownWidth: width });
            }
        };
        _this.getInnerMenu = function () {
            return _this.dropdownMenuRef && _this.dropdownMenuRef.menuRef;
        };
        _this.getPopupDOMNode = function () {
            return _this.triggerRef.getPopupDomNode();
        };
        _this.getDropdownElement = function (newProps) {
            var props = _this.props;
            var dropdownRender = props.dropdownRender,
                ariaId = props.ariaId;

            var menuNode = React.createElement(_DropdownMenu2['default'], (0, _extends3['default'])({ ref: _this.saveDropdownMenuRef }, newProps, { ariaId: ariaId, prefixCls: _this.getDropdownPrefixCls(), onMenuSelect: props.onMenuSelect, onMenuDeselect: props.onMenuDeselect, onPopupScroll: props.onPopupScroll, value: props.value, backfillValue: props.backfillValue, firstActiveValue: props.firstActiveValue, defaultActiveFirstOption: props.defaultActiveFirstOption, dropdownMenuStyle: props.dropdownMenuStyle, menuItemSelectedIcon: props.menuItemSelectedIcon }));
            if (dropdownRender) {
                return dropdownRender(menuNode, props);
            }
            return null;
        };
        _this.getDropdownTransitionName = function () {
            var props = _this.props;
            var transitionName = props.transitionName;
            if (!transitionName && props.animation) {
                transitionName = _this.getDropdownPrefixCls() + '-' + props.animation;
            }
            return transitionName;
        };
        _this.getDropdownPrefixCls = function () {
            return _this.props.prefixCls + '-dropdown';
        };
        _this.saveDropdownMenuRef = (0, _util.saveRef)(_this, 'dropdownMenuRef');
        _this.saveTriggerRef = (0, _util.saveRef)(_this, 'triggerRef');
        _this.state = {
            dropdownWidth: 0
        };
        return _this;
    }

    (0, _createClass3['default'])(SelectTrigger, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.setDropdownWidth();
        }
    }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate() {
            this.setDropdownWidth();
        }
    }, {
        key: 'render',
        value: function render() {
            var _popupClassName;

            var _a = this.props,
                onPopupFocus = _a.onPopupFocus,
                props = __rest(_a, ["onPopupFocus"]);var multiple = props.multiple,
                visible = props.visible,
                inputValue = props.inputValue,
                dropdownAlign = props.dropdownAlign,
                disabled = props.disabled,
                showSearch = props.showSearch,
                dropdownClassName = props.dropdownClassName,
                dropdownStyle = props.dropdownStyle,
                dropdownMatchSelectWidth = props.dropdownMatchSelectWidth;

            var dropdownPrefixCls = this.getDropdownPrefixCls();
            var popupClassName = (_popupClassName = {}, (0, _defineProperty3['default'])(_popupClassName, dropdownClassName, !!dropdownClassName), (0, _defineProperty3['default'])(_popupClassName, dropdownPrefixCls + '--' + (multiple ? 'multiple' : 'single'), 1), _popupClassName);
            var popupElement = this.getDropdownElement({
                menuItems: props.options,
                onPopupFocus: onPopupFocus,
                multiple: multiple,
                inputValue: inputValue,
                visible: visible
            });
            var hideAction = void 0;
            if (disabled) {
                hideAction = [];
            } else if ((0, _util.isSingleMode)(props) && !showSearch) {
                hideAction = ['click'];
            } else {
                hideAction = ['blur'];
            }
            var popupStyle = (0, _extends3['default'])({}, dropdownStyle);
            var widthProp = dropdownMatchSelectWidth ? 'width' : 'minWidth';
            if (this.state.dropdownWidth) {
                popupStyle[widthProp] = this.state.dropdownWidth + 'px';
            }
            return React.createElement(_rcTrigger2['default'], (0, _extends3['default'])({}, props, { showAction: disabled ? [] : this.props.showAction, hideAction: hideAction, ref: this.saveTriggerRef, popupPlacement: "bottomLeft", builtinPlacements: BUILT_IN_PLACEMENTS, prefixCls: dropdownPrefixCls, popupTransitionName: this.getDropdownTransitionName(), onPopupVisibleChange: props.onDropdownVisibleChange, popup: popupElement, popupAlign: dropdownAlign, popupVisible: visible, getPopupContainer: props.getPopupContainer, popupClassName: (0, _classnames2['default'])(popupClassName), popupStyle: popupStyle }), props.children);
        }
    }]);
    return SelectTrigger;
}(React.Component);

exports['default'] = SelectTrigger;

SelectTrigger.defaultProps = {
    dropdownRender: function dropdownRender(menu) {
        return menu;
    }
};
SelectTrigger.propTypes = {
    onPopupFocus: PropTypes.func,
    onPopupScroll: PropTypes.func,
    dropdownMatchSelectWidth: PropTypes.bool,
    dropdownAlign: PropTypes.object,
    visible: PropTypes.bool,
    disabled: PropTypes.bool,
    showSearch: PropTypes.bool,
    dropdownClassName: PropTypes.string,
    multiple: PropTypes.bool,
    inputValue: PropTypes.string,
    filterOption: PropTypes.any,
    options: PropTypes.any,
    prefixCls: PropTypes.string,
    popupClassName: PropTypes.string,
    children: PropTypes.any,
    showAction: PropTypes.arrayOf(PropTypes.string),
    menuItemSelectedIcon: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),
    dropdownRender: PropTypes.func,
    ariaId: PropTypes.string
};
SelectTrigger.displayName = 'SelectTrigger';
module.exports = exports['default'];