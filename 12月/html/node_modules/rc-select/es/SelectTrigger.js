import _defineProperty from 'babel-runtime/helpers/defineProperty';
import _extends from 'babel-runtime/helpers/extends';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
var __rest = this && this.__rest || function (s, e) {
    var t = {};
    for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];
    }return t;
};
import classnames from 'classnames';
import * as PropTypes from 'prop-types';
import Trigger from 'rc-trigger';
import * as React from 'react';
import * as ReactDOM from 'react-dom';
import DropdownMenu from './DropdownMenu';
import { isSingleMode, saveRef } from './util';
Trigger.displayName = 'Trigger';
var BUILT_IN_PLACEMENTS = {
    bottomLeft: {
        points: ['tl', 'bl'],
        offset: [0, 4],
        overflow: {
            adjustX: 0,
            adjustY: 1
        }
    },
    topLeft: {
        points: ['bl', 'tl'],
        offset: [0, -4],
        overflow: {
            adjustX: 0,
            adjustY: 1
        }
    }
};

var SelectTrigger = function (_React$Component) {
    _inherits(SelectTrigger, _React$Component);

    function SelectTrigger(props) {
        _classCallCheck(this, SelectTrigger);

        var _this = _possibleConstructorReturn(this, (SelectTrigger.__proto__ || Object.getPrototypeOf(SelectTrigger)).call(this, props));

        _this.dropdownMenuRef = null;
        _this.setDropdownWidth = function () {
            var dom = ReactDOM.findDOMNode(_this);
            var width = dom.offsetWidth;
            if (width !== _this.state.dropdownWidth) {
                _this.setState({ dropdownWidth: width });
            }
        };
        _this.getInnerMenu = function () {
            return _this.dropdownMenuRef && _this.dropdownMenuRef.menuRef;
        };
        _this.getPopupDOMNode = function () {
            return _this.triggerRef.getPopupDomNode();
        };
        _this.getDropdownElement = function (newProps) {
            var props = _this.props;
            var dropdownRender = props.dropdownRender,
                ariaId = props.ariaId;

            var menuNode = React.createElement(DropdownMenu, _extends({ ref: _this.saveDropdownMenuRef }, newProps, { ariaId: ariaId, prefixCls: _this.getDropdownPrefixCls(), onMenuSelect: props.onMenuSelect, onMenuDeselect: props.onMenuDeselect, onPopupScroll: props.onPopupScroll, value: props.value, backfillValue: props.backfillValue, firstActiveValue: props.firstActiveValue, defaultActiveFirstOption: props.defaultActiveFirstOption, dropdownMenuStyle: props.dropdownMenuStyle, menuItemSelectedIcon: props.menuItemSelectedIcon }));
            if (dropdownRender) {
                return dropdownRender(menuNode, props);
            }
            return null;
        };
        _this.getDropdownTransitionName = function () {
            var props = _this.props;
            var transitionName = props.transitionName;
            if (!transitionName && props.animation) {
                transitionName = _this.getDropdownPrefixCls() + '-' + props.animation;
            }
            return transitionName;
        };
        _this.getDropdownPrefixCls = function () {
            return _this.props.prefixCls + '-dropdown';
        };
        _this.saveDropdownMenuRef = saveRef(_this, 'dropdownMenuRef');
        _this.saveTriggerRef = saveRef(_this, 'triggerRef');
        _this.state = {
            dropdownWidth: 0
        };
        return _this;
    }

    _createClass(SelectTrigger, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.setDropdownWidth();
        }
    }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate() {
            this.setDropdownWidth();
        }
    }, {
        key: 'render',
        value: function render() {
            var _popupClassName;

            var _a = this.props,
                onPopupFocus = _a.onPopupFocus,
                props = __rest(_a, ["onPopupFocus"]);var multiple = props.multiple,
                visible = props.visible,
                inputValue = props.inputValue,
                dropdownAlign = props.dropdownAlign,
                disabled = props.disabled,
                showSearch = props.showSearch,
                dropdownClassName = props.dropdownClassName,
                dropdownStyle = props.dropdownStyle,
                dropdownMatchSelectWidth = props.dropdownMatchSelectWidth;

            var dropdownPrefixCls = this.getDropdownPrefixCls();
            var popupClassName = (_popupClassName = {}, _defineProperty(_popupClassName, dropdownClassName, !!dropdownClassName), _defineProperty(_popupClassName, dropdownPrefixCls + '--' + (multiple ? 'multiple' : 'single'), 1), _popupClassName);
            var popupElement = this.getDropdownElement({
                menuItems: props.options,
                onPopupFocus: onPopupFocus,
                multiple: multiple,
                inputValue: inputValue,
                visible: visible
            });
            var hideAction = void 0;
            if (disabled) {
                hideAction = [];
            } else if (isSingleMode(props) && !showSearch) {
                hideAction = ['click'];
            } else {
                hideAction = ['blur'];
            }
            var popupStyle = _extends({}, dropdownStyle);
            var widthProp = dropdownMatchSelectWidth ? 'width' : 'minWidth';
            if (this.state.dropdownWidth) {
                popupStyle[widthProp] = this.state.dropdownWidth + 'px';
            }
            return React.createElement(Trigger, _extends({}, props, { showAction: disabled ? [] : this.props.showAction, hideAction: hideAction, ref: this.saveTriggerRef, popupPlacement: "bottomLeft", builtinPlacements: BUILT_IN_PLACEMENTS, prefixCls: dropdownPrefixCls, popupTransitionName: this.getDropdownTransitionName(), onPopupVisibleChange: props.onDropdownVisibleChange, popup: popupElement, popupAlign: dropdownAlign, popupVisible: visible, getPopupContainer: props.getPopupContainer, popupClassName: classnames(popupClassName), popupStyle: popupStyle }), props.children);
        }
    }]);

    return SelectTrigger;
}(React.Component);

export default SelectTrigger;

SelectTrigger.defaultProps = {
    dropdownRender: function dropdownRender(menu) {
        return menu;
    }
};
SelectTrigger.propTypes = {
    onPopupFocus: PropTypes.func,
    onPopupScroll: PropTypes.func,
    dropdownMatchSelectWidth: PropTypes.bool,
    dropdownAlign: PropTypes.object,
    visible: PropTypes.bool,
    disabled: PropTypes.bool,
    showSearch: PropTypes.bool,
    dropdownClassName: PropTypes.string,
    multiple: PropTypes.bool,
    inputValue: PropTypes.string,
    filterOption: PropTypes.any,
    options: PropTypes.any,
    prefixCls: PropTypes.string,
    popupClassName: PropTypes.string,
    children: PropTypes.any,
    showAction: PropTypes.arrayOf(PropTypes.string),
    menuItemSelectedIcon: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),
    dropdownRender: PropTypes.func,
    ariaId: PropTypes.string
};
SelectTrigger.displayName = 'SelectTrigger';